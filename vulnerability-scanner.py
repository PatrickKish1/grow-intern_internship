import requests
from urllib.parse import urlparse
import socket

class VulnerabilityScanner:
    def __init__(self, target_url):
        self.target_url = target_url
        self.vulnerabilities = []

    def scan(self):
        self.scan_for_sql_injection()
        self.scan_for_xss()
        self.scan_open_ports()
        self.report()

    def scan_for_sql_injection(self):
        print("Scanning for SQL Injection vulnerabilities...")
        test_payloads = ["' OR '1'='1", '" OR "1"="1']
        for payload in test_payloads:
            response = self.send_payload(payload)
            if self.is_vulnerable(response, payload):
                self.vulnerabilities.append("SQL Injection")

    def scan_for_xss(self):
        print("Scanning for XSS vulnerabilities...")
        test_payloads = ["<script>alert('XSS')</script>", '<img src="x" onerror="alert(\'XSS\')">']
        for payload in test_payloads:
            response = self.send_payload(payload)
            if self.is_vulnerable(response, payload):
                self.vulnerabilities.append("Cross-Site Scripting (XSS)")

    def scan_open_ports(self):
        print("Scanning for open ports...")
        parsed_url = urlparse(self.target_url)
        ip = socket.gethostbyname(parsed_url.netloc)
        open_ports = self.check_open_ports(ip)
        if open_ports:
            ports_info = ', '.join([f"{port}/{self.get_service_name(port)}" for port in open_ports])
            self.vulnerabilities.append(f"Open ports: {ports_info}")

    def send_payload(self, payload):
        url = urlparse(self.target_url)
        vulnerable_url = f"{url.scheme}://{url.netloc}{url.path}?q={payload}"
        response = requests.get(vulnerable_url)
        return response

    def is_vulnerable(self, response, payload):
        return response.status_code == 200 and payload in response.text

    def check_open_ports(self, ip, ports=[21, 22, 23, 25, 80, 110, 143, 443, 3389]):
        open_ports = []
        for port in ports:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(1)
                result = sock.connect_ex((ip, port))
                if result == 0:
                    open_ports.append(port)
        return open_ports

    def get_service_name(self, port):
        try:
            return socket.getservbyport(port)
        except:
            return "unknown service"

    def report(self):
        if not self.vulnerabilities:
            print("No vulnerabilities found.")
        else:
            print("Vulnerabilities found:")
            for vulnerability in self.vulnerabilities:
                print(f"- {vulnerability}")
                self.suggest_remediation(vulnerability)

    def suggest_remediation(self, vulnerability):
        suggestions = {
            "SQL Injection": "Use parameterized queries or prepared statements to avoid SQL Injection attacks.",
            "Cross-Site Scripting (XSS)": "Sanitize and validate all user inputs. Use Content Security Policy (CSP) headers.",
            "Open ports": "Close unnecessary ports and use firewalls to restrict access to essential services."
        }
        for vuln_type in suggestions:
            if vuln_type in vulnerability:
                print(f"  Remediation: {suggestions[vuln_type]}")

if __name__ == "__main__":
    target_url = input("Enter URL: ")  # Replace with the target URL
    scanner = VulnerabilityScanner(target_url)
    scanner.scan()
